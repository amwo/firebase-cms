{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/am/Projects/firebase-cms/components/input/index.js\";\nimport React from \"react\";\nimport { Component } from 'react';\nimport { connect } from 'redux-zero/react';\nimport fn from '../../states/fn';\nimport Router from 'next/router';\nimport style from './style.css';\nimport Default from '../../layouts/default';\n\nvar mapToProps = function mapToProps(_ref) {\n  var s = _ref.s,\n      d = _ref.d;\n  return {\n    s: s,\n    d: d\n  };\n};\n\nvar Input =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Input, _Component);\n\n  function Input(props) {\n    _classCallCheck(this, Input);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props));\n  }\n\n  _createClass(Input, [{\n    key: \"render\",\n    value: function render() {\n      if (this.props.type === 'text' || this.props.type === 'email' || this.props.type === 'password') {\n        return React.createElement(\"input\", {\n          className: this.props.invert ? style.textDark : style.textLight,\n          type: \"text\",\n          value: this.props.value,\n          placeholder: this.props.placeholder,\n          onChange: this.props.onChange,\n          autoFocus: this.props.autoFocus,\n          autoComplete: this.props.autoComplete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return Input;\n}(Component);\n\nexport default connect(mapToProps, fn)(Input);","map":{"version":3,"sources":["/Users/am/Projects/firebase-cms/components/input/index.js"],"names":["Component","connect","fn","Router","style","Default","mapToProps","s","d","Input","props","type","invert","textDark","textLight","value","placeholder","onChange","autoFocus","autoComplete"],"mappings":";;;;;;;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAAQC,OAAR,QAAsB,kBAAtB;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,MAAGC,CAAH,QAAGA,CAAH;AAAA,MAAOC,CAAP,QAAOA,CAAP;AAAA,SAAe;AAAED,IAAAA,CAAC,EAADA,CAAF;AAAKC,IAAAA,CAAC,EAADA;AAAL,GAAf;AAAA,CAAnB;;IAEMC,K;;;;;AACF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8EACTA,KADS;AAElB;;;;6BAEQ;AACL,UAAG,KAAKA,KAAL,CAAWC,IAAX,KAAoB,MAApB,IAA8B,KAAKD,KAAL,CAAWC,IAAX,KAAoB,OAAlD,IAA6D,KAAKD,KAAL,CAAWC,IAAX,KAAoB,UAApF,EAAgG;AAC5F,eAAO;AAAO,UAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,MAAX,GAAoBR,KAAK,CAACS,QAA1B,GAAqCT,KAAK,CAACU,SAA7D;AAAwE,UAAA,IAAI,EAAC,MAA7E;AAAoF,UAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWK,KAAtG;AAA6G,UAAA,WAAW,EAAE,KAAKL,KAAL,CAAWM,WAArI;AAAkJ,UAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWO,QAAvK;AAAiL,UAAA,SAAS,EAAE,KAAKP,KAAL,CAAWQ,SAAvM;AAAkN,UAAA,YAAY,EAAE,KAAKR,KAAL,CAAWS,YAA3O;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AACJ;;;;EATenB,S;;AAYpB,eAAeC,OAAO,CAACK,UAAD,EAAaJ,EAAb,CAAP,CAAwBO,KAAxB,CAAf","sourcesContent":["import {Component} from 'react'\nimport {connect} from 'redux-zero/react';\nimport fn from '../../states/fn';\nimport Router from 'next/router'\nimport style from './style.css'\n\nimport Default from '../../layouts/default'\n\nconst mapToProps = ({ s , d}) => ({ s, d });\n\nclass Input extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        if(this.props.type === 'text' || this.props.type === 'email' || this.props.type === 'password') {\n            return <input className={this.props.invert ? style.textDark : style.textLight} type=\"text\" value={this.props.value} placeholder={this.props.placeholder} onChange={this.props.onChange} autoFocus={this.props.autoFocus} autoComplete={this.props.autoComplete}/>\n        }\n    }\n}\n\nexport default connect(mapToProps, fn)(Input)\n"]},"metadata":{},"sourceType":"module"}