{"version":3,"file":"static/webpack/static/development/pages/_app.js.e07e141ef17479d23227.hot-update.js","sources":["webpack:///./states/fn.js"],"sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firebaseConf from '../conf/firebase'\n\nconst db = firebase.firestore()\n\nimport Router from 'next/router'\nconst fn = store => ({\n    init: store => {\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n\n                let loginUserId = \"\"\n                db.collection('tokyoislands').doc('people').collection('users').where(\"admin\", \"==\", true).get().then(function(querySnapshot) {\n                    querySnapshot.forEach(function(doc) {\n                        if(doc.id === user.uid) {\n                            loginUserId = doc.id\n                        }\n                        //userDataList = doc.data()\n                    })\n                    console.log(querySnapshot.docs())\n                    //console.log(userDataList)\n                    //store.setState(states => ({\n                    //    ...states,\n                    //    s: {\n                    //        ...states.s,\n                    //        login: true,\n                    //        current: {\n                    //            ...states.s.current,\n                    //            user: loginUserId\n                    //        },\n                    //    },\n                    //    d: Object.assign({}, userDataList, ...states.d)\n                    //}))\n                }).catch(function(error) {\n                    console.log(\"Error getting documents: \", error)\n                })\n            } else {\n                Router.push('/login')\n            }\n        })\n    },\n    increment: state => ({ count: state.count + 1 }),\n    decrement: state => ({ count: state.count - 1 }),\n    visibilityNav: (states, bool) => {\n        store.setState(states => ({\n            ...states,\n            s: {\n                ...states.s,\n                visibilities: {\n                    ...states.s.visibilities,\n                    nav: bool\n                }\n            },\n        }))\n    },\n    isUserEmail: (states, email) => {\n        let db = firebase.firestore()\n        store.setState(states => ({\n            ...states,\n            s: {\n                ...states.s,\n                page: {\n                    emailLoading: true,\n                    PasswordLoading: false,\n                    email: '',\n                    password: ''\n                }\n            },\n        }))\n        db.collection('tokyoislands').doc('people').collection('users').where('email', '==', email).get().then(query => {\n            store.setState(states => ({\n                ...states,\n                s: {\n                    ...states.s,\n                    page: {\n                        ...states.s.page,\n                        emailLoading: false,\n                        email: query.docs[0].data().email,\n                        password: ''\n                    }\n                },\n            }))\n        }).catch(err => {\n            store.setState(states => ({\n                ...states,\n                s: {\n                    ...states.s,\n                    page: {}\n                },\n            }))\n            console.log(err)\n        })\n    },\n    auth: (states, email, password) => {\n        store.setState(states => ({\n            ...states,\n            s: {\n                ...states.s,\n                page: {\n                    ...states.s.page,\n                    passwordLoading: true\n                }\n            },\n        }))\n\n        firebase.auth().signInWithEmailAndPassword(email, password).catch(err => {\n            if(err.code) {\n                store.setState(states => ({\n                    ...states,\n                    s: {\n                        ...states.s,\n                        page: {\n                            ...states.s.page,\n                            PasswordLoading: false\n                        }\n                    },\n                }))\n                return\n            } else {\n                store.setState(states => ({\n                    ...states,\n                    s: {\n                        ...states.s,\n                        login: true,\n                        page: {}\n                    },\n                }))\n            }\n        })\n\n        let user = firebase.auth().currentUser;\n        console.log(user.uid)\n    }\n});\n\nexport default fn;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAFA;AAFA;AAFA;AAAA;AAUA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAFA;AAAA;AAYA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAJA;AAFA;AAFA;AAAA;AAYA;AACA;AAAA;AAEA;AAEA;AAFA;AAFA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAFA;AAFA;AAFA;AAAA;AAWA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAFA;AAFA;AAFA;AAAA;AAUA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAHA;AAFA;AAAA;AAQA;AACA;AAEA;AACA;AACA;AA9HA;AAAA;AACA;AAgIA;;;;A","sourceRoot":""}