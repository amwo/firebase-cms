{"version":3,"file":"static/webpack/static/development/pages/news.js.933b90d20361cc4c3e3a.hot-update.js","sources":["webpack:///./widgets/postEditor/index.js"],"sourcesContent":["import {AtomicBlockUtils, ContentBlock, ContentState, Editor, EditorState, KeyBindingUtil, RichUtils, convertFromHTML, convertToRaw, getDefaultKeyBinding} from 'draft-js'\nimport Category from '../../widgets/category'\nimport {Component} from 'react'\nimport Div from '../../components/div'\nimport Input from '../../components/input'\nimport Immutable from 'immutable'\nimport H3 from '../../components/h3'\nimport PostAvatar from '../../widgets/postAvatar'\nimport Select from '../../components/select'\nimport Tags from '../../widgets/tags'\nimport ThumbnailDnD from '../../widgets/thumbnailDnD'\nimport Tools from '../../widgets/tools'\nimport {connect} from 'redux-zero/react'\nimport fn from '../../states/fn'\nimport {stateToHTML} from 'draft-js-export-html'\nimport style from './style.css'\n\nconst mapToProps = ({ s , d}) => ({ s, d });\nconst {hasCommandModifier} = KeyBindingUtil\n\nclass PostEditor extends Component {\n    constructor(props) {\n        super(props)\n        this.styling = this.styling.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.handleKeyCommand = this.handleKeyCommand.bind(this)\n        this.convertFromRaw = this.convertFromRaw.bind(this)\n        this.titleKeyDown = this.titleKeyDown.bind(this)\n        this.wrapper =  this.wrapper.bind(this)\n        this.addImageBlock = this.addImageBlock.bind(this)\n        this.addCodeBlock = this.addCodeBlock.bind(this)\n        this.addTableBlock = this.addTableBlock.bind(this)\n        this.addUlBlock = this.addUlBlock.bind(this)\n        this.addOlBlock = this.addOlBlock.bind(this)\n        this.addMediaBlock = this.addMediaBlock.bind(this)\n        this.dndImages = this.dndImages.bind(this)\n        this.toggleTab = this.toggleTab.bind(this)\n        this.blockRenderMap = Immutable.Map({\n            'header-two': {\n                element: 'h2'\n            },\n            'unstyled': {\n                element: 'div',\n            }\n        })\n        this.state = {\n            editorState: EditorState.createEmpty(),\n            currentKey: '',\n            focus: false,\n            tab: 0\n        }\n    }\n    toggleTab = () => {\n    }\n    onChange = (editorState) => {\n        this.setState({editorState})\n        let selectionState = editorState.getSelection();\n        let anchorKey = selectionState.getAnchorKey();\n        let currentContent = editorState.getCurrentContent();\n        let currentContentBlock = currentContent.getBlockForKey(anchorKey);\n        let start = selectionState.getStartOffset();\n        let end = selectionState.getEndOffset();\n        let focus = selectionState.getHasFocus();\n        let selectedText = currentContentBlock.getText().slice(start, end);\n        this.setState({\n            currentKey: anchorKey,\n            focus\n        })\n        //console.log(currentContent)\n        //console.log(currentContentBlock.getText())\n        //console.log(anchorKey)\n        //console.log(selectedText)\n        //console.log()\n    }\n\n    addImageBlock = () => {}\n    addCodeBlock = () => {}\n    addTableBlock = () => {}\n    addUlBlock = () => {}\n    addOlBlock = () => {}\n    addMediaBlock = () => {}\n    dndImages = () => {}\n\n    convertFromRaw = () => {\n        let raw = convertToRaw(this.state.editorState.getCurrentContent())\n        let html = stateToHTML(this.state.editorState.getCurrentContent())\n        //console.log(raw)\n        //console.log(html)\n    }\n\n    wrapper = contentBlock => {\n        const type = contentBlock.getType()\n        if (type === 'unstyled') {\n            return {\n                component: Tools,\n                props: {\n                    currentKey: this.state.currentKey,\n                    focus: this.state.focus\n                },\n                editable: true,\n            }\n        }\n    }\n\n    handleKeyCommand(command, editorState) {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            this.onChange(newState)\n            return 'handled';\n        }\n        return 'not-handled'\n    }\n\n    titleKeyDown = e => {\n        if(e.keyCode === 13) {\n            e.preventDefault()\n            this.refs['content'].focus()\n        }\n    }\n\n    styling = (content) => {\n        const type = content.getType();\n        //console.log(type)\n        switch(type) {\n            case 'unstyled':\n                return 'editor-content-p'\n                break;\n            default:\n                return null\n        }\n    }\n\n    render() {\n        //console.log(this.selectionState)\n        //console.log(this.currentContentBlock.text)\n        //console.log(this.contentState.getBlockMap().length)\n        //console.log(this.contentState.getFirstBlock().getText())\n        //console.log(this.contentState.getLastBlock().getText())\n        //console.log(this.contentState.createFromBlockArray)\n        //console.log(this.editorState.currentContent)\n        return (\n            <section className={style.r}>\n                <section className={style.center}>\n                    <div className={style.centerWrap}>\n                        <div className={style.tab} style={this.state.tab === 1 ? {left: '-100%'} : {left: 0} }>\n                            <div className={style.content}>\n                                <div className={style.type}>\n                                    <Select type=\"list\" size=\"m\" value=\"News\" />\n                                </div>\n                                <h1 ref=\"title\" className={style.title} placeholder=\"Title\" onKeyDown={this.titleKeyDown} contentEditable suppressContentEditableWarning></h1>\n                                <div className={style.avatarWrap}>\n                                </div>\n                                <div className={style.editor}>\n                                    <Editor\n                                        ref=\"content\"\n                                        editorState={this.state.editorState}\n                                        handleKeyCommand={this.handleKeyCommand}\n                                        placeholder=\"Write your story...\"\n                                        blockRenderMap={this.blockRenderMap}\n                                        blockRendererFn={this.wrapper}\n                                        blockStyleFn={this.styling}\n                                        onChange={this.onChange}\n                                    />\n                                    </div>\n                                    <button onClick={this.convertFromRaw}>Convert from Raw</button>\n                                </div>\n                            </div>\n                            <div className={style.tab} style={this.state.tab === 0 ? {left: '100%'} : {left: 0, background: '#eee'} }>\n                                <div className={style.content}>\n                                    <p>hodsa</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className={style.tabControll}>\n                                <ul>\n                                    <li onClick={this.toggleTab} style={this.state.tab === 1 ? {background: '#eee'} : {background: '#fff'} } >Emotional</li>\n                                    <li onClick={this.toggleTab} style={this.state.tab === 0 ? {background: '#eee', color: '#ccc'} : {background: '#fff'} } >Statics</li>\n                                </ul>\n                        </div>\n                    </section>\n                    <section className={style.right}>\n                        <Div type=\"m\">\n                            <H3 title=\"Author\" />\n                            <Div type=\"s\">\n                                <PostAvatar />\n                            </Div>\n                        </Div>\n                        <Div type=\"m\">\n                            <H3 title=\"Category\" />\n                            <Div type=\"s\">\n                                <Category />\n                            </Div>\n                        </Div>\n                        <Div type=\"m\">\n                            <H3 title=\"Tags\" />\n                            <Div type=\"s\">\n                                <Tags />\n                            </Div>\n                        </Div>\n                        <Div type=\"m\">\n                            <H3 title=\"State\" />\n                            <Div type=\"s\">\n                            </Div>\n                        </Div>\n                    </section>\n                </section>\n        );\n    }\n}\n//<ThumbnailDnD />\n\nexport default connect(mapToProps, fn)(PostEditor)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AAkCA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AArDA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AA+DA;AACA;AAEA;AACA;AACA;AApEA;AAsEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AACA;AACA;AAlFA;AA6FA;AACA;AACA;AAAA;AACA;AACA;AACA;AAlGA;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AACA;AA5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAxBA;AA8BA;AACA;;;AAoDA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA3LA;AACA;AACA;AA6LA;;;;A","sourceRoot":""}