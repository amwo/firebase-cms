{"version":3,"file":"static/webpack/static/development/pages/members.js.cf23c51126a91e1dc997.hot-update.js","sources":["webpack:///./states/fn.js"],"sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firebaseConf from '../conf/firebase'\n\nconst db = firebase.firestore()\n\nimport Router from 'next/router'\nconst fn = store => ({\n    signOut: store => {\n        firebase.auth().signOut().then(function() {\n            store.setState(states => ({\n                ...states,\n                s: {\n                    ...states.s,\n                    login: false,\n                    current: {\n                        ...states.s.current,\n                        user: ''\n                    },\n                }\n            }))\n        }).catch(function(err) {\n            console.log(err)\n        });\n    },\n    fetchMembers: store => {\n        console.log('hoge')\n    },\n    init: store => {\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n                let loginUserId = \"\"\n                let usersData = {}\n                // User Request\n                db.collection('tokyoislands').doc('people').collection('users').where(\"admin\", \"==\", true).get().then(function(querySnapshot) {\n                    querySnapshot.forEach(function(doc) {\n                        if(doc.id === user.uid) {\n                            loginUserId = doc.id\n                        }\n                        usersData[doc.id] = doc.data()\n                    })\n                    // Set store\n                    store.setState(states => ({\n                        ...states,\n                        s: {\n                            ...states.s,\n                            login: true,\n                            visibilities: {\n                                ...states.s.visibilities,\n                                loading: false\n                            },\n                            current: {\n                                ...states.s.current,\n                                user: loginUserId\n                            },\n                        },\n                        d: usersData\n                    }))\n\n                    db.collection('tokyoislands').doc('settings').get().then(function(doc) {\n                        if (doc.exists) {\n                            console.log(doc.data())\n                            store.setState(states => ({\n                                ...states,\n                                f: {\n                                    settings: doc.data()\n                                }\n                            }))\n                            Router.push(Router.route)\n                        } else {\n                            console.log(\"No such document on Settings!\");\n                        }\n\n                    }).catch(function(error) {\n                        console.log(\"Error getting documents: \", error)\n                    })\n                }).catch(function(error) {\n                    console.log(\"Error getting documents: \", error)\n                })\n\n            } else {\n                store.setState(states => ({\n                    ...states,\n                    s: {\n                        ...states.s,\n                        visibilities: {\n                            ...states.s.visibilities,\n                            loading: false\n                        }\n                    }\n                }))\n                Router.push('/login')\n            }\n        })\n    },\n    increment: state => ({ count: state.count + 1 }),\n    decrement: state => ({ count: state.count - 1 }),\n    visibilityNav: (states, bool) => {\n        store.setState(states => ({\n            ...states,\n            s: {\n                ...states.s,\n                visibilities: {\n                    ...states.s.visibilities,\n                    nav: bool\n                }\n            },\n        }))\n    },\n    isUserEmail: (states, email) => {\n        let db = firebase.firestore()\n        store.setState(states => ({\n            ...states,\n            s: {\n                ...states.s,\n                page: {\n                    emailLoading: true,\n                    PasswordLoading: false,\n                    email: '',\n                    password: ''\n                }\n            },\n        }))\n        db.collection('tokyoislands').doc('people').collection('users').where('email', '==', email).get().then(query => {\n            store.setState(states => ({\n                ...states,\n                s: {\n                    ...states.s,\n                    page: {\n                        ...states.s.page,\n                        emailLoading: false,\n                        email: query.docs[0].data().email,\n                        password: ''\n                    }\n                },\n            }))\n        }).catch(err => {\n            store.setState(states => ({\n                ...states,\n                s: {\n                    ...states.s,\n                    page: {}\n                },\n            }))\n            console.log(err)\n        })\n    },\n    auth: (states, email, password) => {\n        store.setState(states => ({\n            ...states,\n            s: {\n                ...states.s,\n                visibilities: {\n                    ...states.s.visibilities,\n                    loading: false\n                },\n                page: {\n                    ...states.s.page,\n                    passwordLoading: true\n                }\n            },\n        }))\n        firebase.auth().signInWithEmailAndPassword(email, password).catch(err => {\n            if(err.code) {\n                store.setState(states => ({\n                    ...states,\n                    s: {\n                        ...states.s,\n                        err: {\n                            code: err.code,\n                            message: err.message\n                        },\n                        visibilities: {\n                            ...states.s.visibilities,\n                            loading: false\n                        },\n                        page: {\n                            ...states.s.page,\n                            PasswordLoading: false\n                        }\n                    },\n                }))\n                return\n            } else {\n                store.setState(states => ({\n                    ...states,\n                    s: {\n                        ...states.s,\n                        err: {\n                            code: '',\n                            message: '',\n                        },\n                        visibilities: {\n                            ...states.s.visibilities,\n                            loading: false\n                        },\n                        login: true,\n                        page: {}\n                    },\n                }))\n            }\n        })\n        let user = firebase.auth().currentUser;\n    }\n});\n\nexport default fn;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAFA;AAHA;AAFA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAFA;AAIA;AAEA;AAFA;AAPA;AAYA;AAdA;AAAA;AAiBA;AACA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAFA;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AAEA;AAFA;AAFA;AAFA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAFA;AAFA;AAFA;AAAA;AAUA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAFA;AAAA;AAYA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAJA;AAFA;AAFA;AAAA;AAYA;AACA;AAAA;AAEA;AAEA;AAFA;AAFA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAFA;AAIA;AAEA;AAFA;AANA;AAFA;AAAA;AAcA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AAFA;AAIA;AAEA;AAFA;AAVA;AAFA;AAAA;AAkBA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AAFA;AAIA;AACA;AAXA;AAFA;AAAA;AAgBA;AACA;AACA;AACA;AApMA;AAAA;AACA;AAsMA;;;;A","sourceRoot":""}